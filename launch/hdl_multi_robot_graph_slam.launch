<?xml version="1.0"?>

<!-- Based on hdl_graph_slam_400 -->

<!-- 
  Launches all HDL fusion nodes in the provided namespace
  and remaps all topics accordingly. Default namespace is
  names 'atlas'. For multiple rovers unique namespaces
  have to be provided when calling this file.
-->

<launch>

  <!-- Default namespace is set to atlas -->
  <arg name="model_namespace" default="atlas" />

  <!-- arguments -->
  <arg name="nodelet_manager"                  default="velodyne_nodelet_manager" />
  <arg name="enable_floor_detection"           default="false" />
  <arg name="enable_gps"                       default="false" />
  <arg name="enable_imu_acc"                   default="false" />
  <arg name="enable_imu_ori"                   default="false" />
  <!-- when using IMU, consider to add IMU fusion as well, see hdl_graph_slam_imu.launch in hdl_graph_slam package -->
  <arg name="tf_link_values"                   default="0.2 0 0.8 0 0.2617993877991494 0" />

  <arg name="points_topic"                     default="/velodyne/points" />
  <arg name="map_frame_id"                     default="map" />
  <arg name="lidar_odom_frame_id"              default="odom" />
  <arg name="imu_topic"                        default="/imu/data" />

  <!-- optional arguments -->
  <arg name="enable_robot_odometry_init_guess" default="false" />
  <arg name="robot_odom_frame_id"              default="robot_odom" />

	<!-- Initial position and orientation, default at 0,0,0 -->
	<arg name="x"               default="0" />
	<arg name="y"               default="0" />
	<arg name="z"               default="0"  />
	<arg name="roll"            default="0" />
	<arg name="pitch"           default="0" />
	<arg name="yaw"             default="0" />
  <arg name="init_pose_topic" default="NONE" /> <!-- if not NONE, init pose will be receiced by topic (nav_msgs/Odometry)-->

  <group ns="$(arg model_namespace)">

    <!-- transformation between lidar and base_link -->
    <node pkg ="tf" 
          type="static_transform_publisher" 
          name="lidar2base_publisher" 
          args="$(arg tf_link_values) $(arg model_namespace)/base_link $(arg model_namespace)/velodyne 10" />

    <!-- in case you use velodyne_driver, comment out the following line -->  
    <?ignore   launch-prefix="gdb -ex run --args" ?>
    <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen" />

    <!-- prefiltering_nodelet -->
    <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)">     
      <!-- in case base_link_frame is blank, mapping will be performed in the lidar frame -->
      <param name="base_link_frame" value="$(arg model_namespace)/base_link" />
      <!-- distance filter -->
      <param name="use_distance_filter" value="true" />
      <param name="distance_near_thresh" value="0.1" />
      <param name="distance_far_thresh" value="100.0" />
      <!-- NONE, VOXELGRID, or APPROX_VOXELGRID -->
      <param name="downsample_method" value="VOXELGRID" />
      <param name="downsample_resolution" value="0.1" />
      <!-- NONE, RADIUS, or STATISTICAL -->
      <param name="outlier_removal_method" value="RADIUS" />
      <param name="statistical_mean_k" value="30" />
      <param name="statistical_stddev" value="1.2" />
      <param name="radius_radius" value="0.5" />
      <param name="radius_min_neighbors" value="2" />

      <remap from="/imu/data" to="$(arg imu_topic)" />
      <remap from="/velodyne_points"              to="$(arg points_topic)" />
      <remap from="/prefiltering/filtered_points" to="/$(arg model_namespace)/prefiltering/filtered_points" />
      <remap from="/prefiltering/colored_points"  to="/$(arg model_namespace)/prefiltering/colored_points" />
    </node>


    <!-- scan_matching_odometry_nodelet -->
    <node pkg="nodelet" type="nodelet" name="scan_matching_odometry_nodelet" 
          args="load hdl_graph_slam/ScanMatchingOdometryNodelet $(arg nodelet_manager)">

      <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
      <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" />
      <param name="keyframe_delta_trans" value="1.0" />
      <param name="keyframe_delta_angle" value="1.0" />
      <param name="keyframe_delta_time" value="10000.0" />
      <param name="transform_thresholding" value="false" />
      <param name="enable_robot_odometry_init_guess" value="$(arg enable_robot_odometry_init_guess)" />
      <param name="max_acceptable_trans" value="1.0" />
      <param name="max_acceptable_angle" value="1.0" />
      <param name="downsample_method" value="NONE" />
      <param name="downsample_resolution" value="0.1" />
      <!-- ICP, GICP, NDT, GICP_OMP, NDT_OMP, FAST_GICP(recommended), or FAST_VGICP -->
      <param name="registration_method" value="FAST_GICP" />
      <param name="reg_num_threads" value="0" />
      <param name="reg_transformation_epsilon" value="0.1"/>
      <param name="reg_maximum_iterations" value="64"/>
      <param name="reg_max_correspondence_distance" value="2.0"/>
      <param name="reg_max_optimizer_iterations" value="20"/>
      <param name="reg_use_reciprocal_correspondences" value="false"/>
      <param name="reg_correspondence_randomness" value="20"/>
      <param name="reg_resolution" value="1.0" />
      <param name="reg_nn_search_method" value="DIRECT7" />

      <param name="points_topic"                           value="$(arg points_topic)" />
      <remap from="/filtered_points"                       to="/$(arg model_namespace)/prefiltering/filtered_points" />
      <remap from="/scan_matching_odometry/transform"      to="/$(arg model_namespace)/scan_matching_odometry/transform"  />
      <remap from="/scan_matching_odometry/read_until"     to="/$(arg model_namespace)/scan_matching_odometry/read_until" />
      <remap from="/scan_matching_odometry/status"         to="/$(arg model_namespace)/scan_matching_odometry/status"     />
      <remap from="/scan_matching_odometry/odom"           to="/$(arg model_namespace)/scan_matching_odometry/odom"       />
      <remap from="/scan_matching_odometry/aligned_points" to="/$(arg model_namespace)/scan_matching_odometry/aligned_points"       />

    </node>

    <!-- floor_detection_nodelet -->
    <node pkg="nodelet" type="nodelet" name="floor_detection_nodelet" 
          args="load hdl_graph_slam/FloorDetectionNodelet $(arg nodelet_manager)" if="$(arg enable_floor_detection)">

      <param name="tilt_deg" value="0.0" />
      <param name="sensor_height" value="2.0" />
      <param name="height_clip_range" value="1.0" />
      <param name="floor_pts_thresh" value="512" />
      <param name="use_normal_filtering" value="true" />
      <param name="normal_filter_thresh" value="20.0" />

      <param name="points_topic"                           value="$(arg points_topic)" />
      <remap from="/filtered_points"                       to="/$(arg model_namespace)/prefiltering/filtered_points" />
      <remap from="/floor_detection/floor_coeffs"          to="/$(arg model_namespace)/floor_detection/floor_coeffs" />
      <remap from="/floor_detection/floor_filtered_points" to="/$(arg model_namespace)/floor_detection/floor_filtered_points" />
      <remap from="/floor_detection/read_until"            to="/$(arg model_namespace)/floor_detection/read_until" />
      <remap from="/floor_detection/floor_points"          to="/$(arg model_namespace)/floor_detection/floor_points" />
    </node>


    <!-- hdl_graph_slam_nodelet -->
    <node pkg="nodelet" type="nodelet" name="hdl_graph_slam_nodelet" args="load hdl_graph_slam/HdlGraphSlamNodelet $(arg nodelet_manager)">
      <param name="own_name" value="$(arg model_namespace)" />
      <!-- frame settings -->
      <param name="map_frame_id" value="$(arg map_frame_id)" />
      <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
      <!-- optimization params -->
      <!-- typical solvers: gn_var, gn_fix6_3, gn_var_cholmod, lm_var, lm_fix6_3, lm_var_cholmod, ... -->
      <param name="g2o_solver_type" value="lm_var_cholmod" />
      <param name="g2o_solver_num_iterations" value="512" />
      <!-- constraint switches -->
      <param name="enable_gps" value="$(arg enable_gps)" />
      <param name="enable_imu_acceleration" value="$(arg enable_imu_acc)" />
      <param name="enable_imu_orientation" value="$(arg enable_imu_ori)" />
      <!-- keyframe registration params -->
      <param name="max_keyframes_per_update" value="10" />
      <param name="keyframe_delta_trans" value="2.0" />
      <param name="keyframe_delta_angle" value="2.0" />
      <!-- fix first node for optimization stability -->
      <param name="fix_first_node" value="true"/>
      <param name="fix_first_node_stddev" value="10 10 10 1 1 1"/>
      <param name="fix_first_node_adaptive" value="false"/>
      <!-- init pose -->
      <param name="init_pose" value="$(arg x) $(arg y) $(arg z) $(arg yaw) $(arg pitch) $(arg roll)"/>
      <param name="init_pose_topic" value="$(arg init_pose_topic)"/> <!-- set to NONE to use init_pose instead -->
      <!-- loop closure params -->
      <param name="distance_thresh" value="15.0" />
      <param name="accum_distance_thresh" value="25.0" />
      <param name="min_edge_interval" value="15.0" />
      <param name="fitness_score_thresh" value="2.5" />
      <!-- graph request params -->
      <param name="graph_request_min_accum_dist" value="2.0" />
      <param name="graph_request_max_robot_dist" value="10.0" />      
      <!-- scan matching params -->
      <param name="registration_method" value="FAST_GICP" />
      <param name="reg_num_threads" value="0" />
      <param name="reg_transformation_epsilon" value="0.1"/>
      <param name="reg_maximum_iterations" value="64"/>
      <param name="reg_max_correspondence_distance" value="2.0"/>
      <param name="reg_max_optimizer_iterations" value="20"/>
      <param name="reg_use_reciprocal_correspondences" value="false"/>
      <param name="reg_correspondence_randomness" value="20"/>
      <param name="reg_resolution" value="1.0" />
      <param name="reg_nn_search_method" value="DIRECT7" />
      <!-- edge params -->
      <!-- GPS -->
      <param name="gps_edge_robust_kernel" value="NONE" />
      <param name="gps_edge_robust_kernel_size" value="1.0" />
      <param name="gps_edge_stddev_xy" value="20.0" />
      <param name="gps_edge_stddev_z" value="5.0" />
      <!-- IMU orientation -->
      <param name="imu_orientation_edge_robust_kernel" value="NONE" />
      <param name="imu_orientation_edge_stddev" value="1.0" />
      <!-- IMU acceleration (gravity vector) -->
      <param name="imu_acceleration_edge_robust_kernel" value="NONE" />
      <param name="imu_acceleration_edge_stddev" value="1.0" />
      <!-- ground plane -->
      <param name="floor_edge_robust_kernel" value="NONE" />
      <param name="floor_edge_stddev" value="10.0" />
      <!-- scan matching -->
      <!-- robust kernels: NONE, Cauchy, DCS, Fair, GemanMcClure, Huber, PseudoHuber, Saturated, Tukey, Welsch -->
      <param name="odometry_edge_robust_kernel" value="NONE" />
      <param name="odometry_edge_robust_kernel_size" value="1.0" />
      <param name="loop_closure_edge_robust_kernel" value="Huber" />
      <param name="loop_closure_edge_robust_kernel_size" value="1.0" />
      <param name="use_const_inf_matrix" value="false" />
      <param name="const_stddev_x" value="0.5" />
      <param name="const_stddev_q" value="0.1" />
      <param name="var_gain_a" value="20.0" /> <!-- default value is 20 -->
      <param name="min_stddev_x" value="0.1" />
      <param name="max_stddev_x" value="5.0" />
      <param name="min_stddev_q" value="0.05" />
      <param name="max_stddev_q" value="0.2" />
      <!-- update params -->
      <param name="graph_update_interval" value="3.0" />
      <param name="map_cloud_update_interval" value="10.0" />
      <param name="map_cloud_resolution" value="0.1" />
      <param name="map_cloud_count_threshold" value="2" />
      

      <!-- topics -->
      <param name="points_topic" value="$(arg points_topic)" />
      <remap from="/imu/data" to="$(arg imu_topic)" />
      
      <remap from="/filtered_points" to="/$(arg model_namespace)/prefiltering/filtered_points"   />
      <remap from="/odom"            to="/$(arg model_namespace)/scan_matching_odometry/odom"    />
      <remap from="/floor_coeffs"    to="/$(arg model_namespace)/floor_detection/floor_coeffs"  />

      <remap from="/hdl_graph_slam/map_points"    to="/$(arg model_namespace)/hdl_graph_slam/map_points" />
      <remap from="/hdl_graph_slam/markers"       to="/$(arg model_namespace)/hdl_graph_slam/markers"    />
      <remap from="/hdl_graph_slam/markers_covariance"       to="/$(arg model_namespace)/hdl_graph_slam/markers_covariance"    />
      <remap from="/hdl_graph_slam/odom2pub"      to="/$(arg model_namespace)/hdl_graph_slam/odom2pub"   />
      <remap from="/hdl_graph_slam/read_until"    to="/$(arg model_namespace)/hdl_graph_slam/read_until" />
      <remap from="/hdl_graph_slam/others_poses"  to="/$(arg model_namespace)/hdl_graph_slam/others_poses" />

      <remap from="/hdl_graph_slam/publish_graph"       to="/$(arg model_namespace)/hdl_graph_slam/publish_graph" />
      <remap from="/hdl_graph_slam/dump"                to="/$(arg model_namespace)/hdl_graph_slam/dump" />
      <remap from="/hdl_graph_slam/save_map"            to="/$(arg model_namespace)/hdl_graph_slam/save_map" />
      <remap from="/hdl_graph_slam/get_map"             to="/$(arg model_namespace)/hdl_graph_slam/get_map" />
      <remap from="/hdl_graph_slam/get_graph_estimate"  to="/$(arg model_namespace)/hdl_graph_slam/get_graph_estimate" />

    </node>

    <node pkg="hdl_graph_slam" type="map2odom_publisher.py" name="map2odom_publisher"> 
      <remap from="/hdl_graph_slam/odom2pub"   to="/$(arg model_namespace)/hdl_graph_slam/odom2pub"   />
    </node>

  </group>

</launch>
